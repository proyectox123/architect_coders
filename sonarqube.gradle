apply plugin: "org.sonarqube"

def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

sonarqube {
    properties {
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.exclusions", '**/*Test*/**,' +
                '*.json,' +
                '**/*test*/**,' +
                '**/.gradle/**,' +
                '**/R.class'
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", ["src/test/java"]
        property "sonar.test.inclusions", "**/*Test*/**"

        property "sonar.host.url", "http://localhost:9000/"
        property "sonar.login", "admin"
        property "sonar.password", "admin"

        def sonarProjectName = apikeyProperties['SONAR_PROJECT_NAME']
        def sonarProjectKey = apikeyProperties['SONAR_PROJECT_KEY']

        property "sonar.projectName", sonarProjectName
        property "sonar.projectKey", sonarProjectKey

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files
        unit.addAll(ui)
        def files = unit.join(", ")

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
    }
}